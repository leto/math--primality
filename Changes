=head1 Math::Primality Release Summaries

=head2 0.09

  Use two small GCDs in is_prime, making it faster for non-primes.

  The AKS implementation was only doing trial division.  Fix to do the
  actual AKS test.  Sadly this makes it incredibly slow.

  Change AKS to the latest standard implementation (v6 of the paper).

  Rewrite big parts of BigPolynomial.

=head2 0.08

  Use a small GCD in the prime_count loop, making it much faster.

=head2 0.07

  All functions should work with objects that can stringify themselves.
  Math::BigInt is the obvious example of this.

  primes.pl uses next_prime instead of is_prime.

=head2 0.06

  is_strong_pseudoprime() is more efficient for large inputs.

  aks($n) changed to is_aks_prime($n).

  Add Math::Primality::BigPolynomial, and use it for AKS.

=head2 0.05

 The AKS primality test (also known as Agrawal–Kayal–Saxena primality test) was implemented
 in Math::Primality::AKS.

 https://en.wikipedia.org/wiki/AKS_primality_test

=head2 0.04

 a version for everyone!

=head2 0.03

=head3 0.03_03

 documentation

=head3 0.03_02

 optimizations and code cleanup

=head3 0.03_01

 is_prime(), next_prime(), prev_prime() and prime_count()

=head3 0.03_00

 is_strong_lucas_pseudoprime() implemented

=head2 0.02

 documentation and house keeping cleanups

=head2 0.01 - Initial Release

 is_pseudoprime() and is_strong_pseudoprime() implemented

